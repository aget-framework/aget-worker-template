"""
Init Command - Creates AGENTS.md configuration
Implements three-tier degradation pattern.
"""

import os
import subprocess
from pathlib import Path
from typing import Any, Dict, List

from aget.base import BaseCommand


class InitCommand(BaseCommand):
    """Initialize agent configuration with appropriate tier."""

    def __init__(self):
        """Initialize with default template."""
        super().__init__()
        self.default_template = """# Agent Configuration

## Project Context
{project_name} - Created with AGET v2

## Session Management Protocols

### Wake Up Protocol
When user says "wake up" or "hey":
- Show current directory and status
- Check git status
- Report readiness

### Wind Down Protocol
When user says "wind down" or "save work":
- Commit changes
- Create session notes
- Show completion

### Sign Off Protocol
When user says "sign off" or "all done":
- Quick save and exit
- No questions

## Directory Structure
- `outputs/` - Agent's internal workspace (private explorations)
- `data/` - Persistent data storage
- `.aget/evolution/` - Evolution and insights capture

## Vocabulary Note
- `outputs/` = Your agent's private workspace for exploration
- `Outputs` = Public products your agent creates/maintains for others

## Available Patterns
Run `aget list` to see available patterns you can apply.

---
*Generated by AGET v2 - https://github.com/gmelli/aget-cli-agent-template*
"""

    def tier_basic(self, **kwargs) -> Dict[str, Any]:
        """
        Basic tier - Create AGENTS.md and .aget/ directory.
        No external tools required.
        """
        args = kwargs.get('args', [])

        # Determine project path
        project_path = Path.cwd()
        if args and len(args) > 0:
            if args[0] != '.':
                project_path = Path(args[0])

        # Create AGENTS.md
        agents_file = project_path / "AGENTS.md"
        if agents_file.exists() and '--force' not in args:
            return {
                'success': False,
                'error': 'AGENTS.md already exists. Use --force to overwrite.'
            }

        # Create .aget directory for state
        aget_dir = project_path / ".aget"
        aget_dir.mkdir(exist_ok=True)

        # Create .aget/evolution directory for capturing insights
        evolution_dir = aget_dir / "evolution"
        evolution_dir.mkdir(exist_ok=True)

        # Create outputs directory for agent's internal workspace
        outputs_dir = project_path / "outputs"
        outputs_dir.mkdir(exist_ok=True)

        # Create data directory for persistent data storage
        data_dir = project_path / "data"
        data_dir.mkdir(exist_ok=True)

        # Write AGENTS.md
        content = self.default_template.format(
            project_name=project_path.name
        )
        agents_file.write_text(content)

        # Create version tracking
        version_file = aget_dir / "version.json"
        version_data = {
            "aget_version": "2.0.0-alpha",
            "created": "2025-09-22",
            "tier": "basic"
        }
        import json
        version_file.write_text(json.dumps(version_data, indent=2))

        # Create CLAUDE.md symlink for backward compatibility
        claude_file = project_path / "CLAUDE.md"
        if not claude_file.exists():
            try:
                claude_file.symlink_to("AGENTS.md")
            except OSError:
                # Windows might not support symlinks
                claude_file.write_text(
                    "# This file redirects to AGENTS.md\n"
                    "Please see AGENTS.md for agent configuration.\n"
                )

        return {
            'success': True,
            'message': f'Created AGENTS.md in {project_path}',
            'files_created': [
                'AGENTS.md',
                '.aget/',
                '.aget/evolution/',
                'outputs/',
                'data/',
                'CLAUDE.md'
            ]
        }

    def tier_git(self, **kwargs) -> Dict[str, Any]:
        """
        Git tier - Also update .gitignore.
        """
        # First do everything basic tier does
        result = self.tier_basic(**kwargs)
        if not result['success']:
            return result

        args = kwargs.get('args', [])
        project_path = Path.cwd()
        if args and len(args) > 0 and args[0] != '.':
            project_path = Path(args[0])

        # Update .gitignore
        gitignore = project_path / ".gitignore"
        ignore_lines = [
            "# AGET files",
            ".aget/backups/",
            ".aget/cache/",
            ".session_state.json"
        ]

        if gitignore.exists():
            content = gitignore.read_text()
            for line in ignore_lines:
                if line not in content:
                    content += f"\n{line}"
            gitignore.write_text(content)
        else:
            gitignore.write_text("\n".join(ignore_lines) + "\n")

        result['files_created'].append('.gitignore')
        result['message'] += ' (git tier: updated .gitignore)'

        # Check if in git repo
        try:
            subprocess.run(
                ['git', 'rev-parse', '--git-dir'],
                cwd=project_path,
                capture_output=True,
                check=True,
                timeout=1
            )
            result['git_repo'] = True
        except:
            result['git_repo'] = False
            result['note'] = 'Not a git repository. Run `git init` to enable version control.'

        return result

    def tier_gh(self, **kwargs) -> Dict[str, Any]:
        """
        GitHub CLI tier - Also create issue templates.
        """
        # First do everything git tier does
        result = self.tier_git(**kwargs)
        if not result['success']:
            return result

        args = kwargs.get('args', [])
        project_path = Path.cwd()
        if args and len(args) > 0 and args[0] != '.':
            project_path = Path(args[0])

        # Create .github/ISSUE_TEMPLATE for agent error reporting
        github_dir = project_path / ".github" / "ISSUE_TEMPLATE"
        github_dir.mkdir(parents=True, exist_ok=True)

        # Create agent error template
        agent_template = github_dir / "agent-error.yml"
        template_content = """name: Agent Error Report
description: Report an error encountered by an AI agent
title: "[Agent Error]: "
labels: ["agent-reported", "needs-triage"]
body:
  - type: dropdown
    id: agent_type
    attributes:
      label: Agent Type
      options:
        - Claude Code
        - Cursor
        - Aider
        - Windsurf
        - Other
    validations:
      required: true

  - type: textarea
    id: error_description
    attributes:
      label: Error Description
      description: What went wrong?
    validations:
      required: true

  - type: textarea
    id: context
    attributes:
      label: Context
      description: What was the agent trying to do?
    validations:
      required: true

  - type: textarea
    id: stack_trace
    attributes:
      label: Error Output
      description: Any error messages or stack traces
      render: shell
"""
        agent_template.write_text(template_content)

        result['files_created'].extend([
            '.github/ISSUE_TEMPLATE/',
            '.github/ISSUE_TEMPLATE/agent-error.yml'
        ])
        result['message'] += ' (gh tier: created issue templates)'

        # Check if gh is authenticated
        try:
            gh_check = subprocess.run(
                ['gh', 'auth', 'status'],
                capture_output=True,
                timeout=1
            )
            if gh_check.returncode == 0:
                result['gh_ready'] = True
            else:
                result['gh_ready'] = False
                result['gh_note'] = 'Run `gh auth login` to enable GitHub features'
        except:
            result['gh_ready'] = False

        return result